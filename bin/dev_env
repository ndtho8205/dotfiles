#!/usr/bin/env bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

trap _cleanup SIGINT SIGTERM ERR EXIT

readonly TEMP_DIR="$(mktemp --directory --quiet)"
readonly INSTALLATION_DIR="$HOME/ProgramFiles"

readonly VERSION_REGEX="(\\d+\\.)+\\d+"
readonly PY3_VERSION="3.7.10"
readonly NODE_VERSION="14.17.3"

readonly PY_PKGS=("black" "flake8" "pylint")
readonly NODE_PKGS=("markdownlint-cli:markdownlint" "prettier")
readonly RUST_PKGS=("cargo-edit" "bat" "tealdeer:tldr" "watchexec-cli:watchexec")

main() {
  subcommand=

  _setup_colors
  _parse_params "$@"

  _setup_python_env
  _setup_node_env
  _setup_rust_env
  _setup_docker

  if  [[ "$subcommand" == "install" ]]; then
    echo
    echo
    _warn "$(cat <<EOF
You need to restart your current shell
to reload your PATH environment variable.
EOF
)"
    echo
  fi
}

_print_usage() {
  cat <<EOF
usage: $(basename "$0") [OPTION] {install,update,list}

Install and update personal development environment.

Subcommands:
  i, install     Install development environment
  u, update      Update all packages
  l, list        List installed packages

Options:
  -h, --help     Show this help and exit
EOF
}

_parse_params() {
  if [[ $# -eq 0 ]]; then
    _print_usage
    exit 0
  fi

  local param

  while [[ $# -gt 0 ]]; do
    param="$1"
    shift

    case $param in
      i|install)
        subcommand="install"
        ;;
      u|update)
        subcommand="update"
        ;;
      list)
        subcommand="list"
        ;;
      -h | --help)
        _print_usage
        exit 0
        ;;
      -?*)
        _die "unrecognized option: $param"
        ;;
      *)
        _die "unrecognized subcommand: $param"
        ;;
    esac
  done
}

_cleanup() {
  rm -rf "$TEMP_DIR"
}

##################################################
## Programming Languages Development Environments
##################################################

_setup_python_env() {
  _info ">> Python development environment"

  local pyenv_installed_version="$(_get_command_version 'pyenv')"
  local pipx_installed_version="$(_get_command_version "pipx")"
  local poetry_installed_version="$(_get_command_version "poetry")"

  case $subcommand in
    install)
      # pyenv
      if [[ -n $pyenv_installed_version ]]; then
        _log ">>   pyenv ($pyenv_installed_version) was already installed"
        _print_command_info "pyenv"
        _print_command_info "python"
        _print_command_info "pip"
      else
        _log ">>   Installing pyenv build dependencies..."
        case "$(_get_distro)" in
          ubuntu|debian)
            sudo apt install -y --no-install-recommends \
              make build-essential libssl-dev zlib1g-dev libbz2-dev \
              libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
              xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
            ;;
          manjaro|arch)
            sudo pacman -Sy base-devel openssl zlib xz
            ;;
        esac

        _log ">>   Installing pyenv..."
        curl https://pyenv.run | bash
        export PATH="$HOME/.pyenv/bin:$PATH"
        eval "$(pyenv init --path)"
        _print_command_info "pyenv"

        _log ">>   Installing python ($PY3_VERSION) using pyenv..."
        pyenv install "$PY3_VERSION"
        pyenv global "$PY3_VERSION" system
        pip install --upgrade pip
        _print_command_info "python"
        _print_command_info "pip"
      fi

      # pipx
      if [[ -n $pipx_installed_version ]]; then
        _log ">>   pipx ($pipx_installed_version) was already installed"
      else
        _log ">>   Installing pipx..."
        pip install pipx
        pipx --version
        _print_command_info "pipx"
      fi

      # poetry
      if [[ -n $poetry_installed_version ]]; then
        _log ">>   poetry ($poetry_installed_version) was already installed"
      else
        _log ">>   Installing poetry..."
        curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -
        _print_command_info "poetry"
      fi

      # python packages
      for pkg_name in "${PY_PKGS[@]}"; do
        local pkg_installed_version="$(_get_command_version "$pkg_name")"

        if [[ -n $pkg_installed_version ]]; then
          _log ">>   $pkg_name ($pkg_installed_version) was already installed"
        else
          _log ">>   Installing $pkg_name using pipx..."
          pipx install "$pkg_name"
          _print_command_info "$pkg_name"
        fi
      done
      ;;
    update)
      _log ">>   Updating pyenv from $pyenv_installed_version..."
      pyenv update
      pip install --upgrade pip
      _print_command_info "pyenv"
      _print_command_info "python"
      _print_command_info "pip"

      _log ">>   Updating pipx from $pipx_installed_version..."
      pip install --upgrade pipx
      _print_command_info "pipx"

      _log ">>   Updating poetry $poetry_installed_version..."
      poetry self update
      _print_command_info "poetry"

      for pkg_name in "${PY_PKGS[@]}"; do
        local pkg_installed_version="$(_get_command_version "$pkg_name")"

        _log ">>   Updating $pkg_name from $pkg_installed_version using pipx..."
        pipx upgrade "$pkg_name"
        _print_command_info "$pkg_name"
      done
      ;;
  esac
}

_setup_node_env() {
  _info ">> Node.js development environment"

  local nodenv_installed_version="$(_get_command_version 'nodenv')"

  case $subcommand in
    install)
      # nodenv
      if [[ -n $nodenv_installed_version ]]; then
        _log ">>   nodenv ($nodenv_installed_version) was already installed"
        _print_command_info "nodenv"
        _print_command_info "node"
        _print_command_info "npm"
      else
        _log ">>   Installing nodenv..."
        git clone https://github.com/nodenv/nodenv.git "$HOME/.nodenv"
        cd "$HOME/.nodenv" && src/configure && make -C src
        export PATH="$HOME/.nodenv/bin:$PATH"
        eval "$(nodenv init -)"
        mkdir -p "$(nodenv root)"/plugins
        git clone https://github.com/nodenv/node-build.git "$(nodenv root)"/plugins/node-build
        git clone https://github.com/nodenv/nodenv-update.git "$(nodenv root)"/plugins/nodenv-update
        git -C "$(nodenv root)"/plugins/node-build pull
        _print_command_info "nodenv"

        _log ">>   Installing node ($NODE_VERSION) using nodenv..."
        nodenv install "$NODE_VERSION"
        nodenv global "$NODE_VERSION" system
        npm install -g npm
        _print_command_info "node"
        _print_command_info "npm"
      fi

      # node packages
      for pkg_name in "${NODE_PKGS[@]}"; do
        local pkg_installed_version="$(_get_command_version "$pkg_name")"

        if [[ -n $pkg_installed_version ]]; then
          _log ">>   $pkg_name ($pkg_installed_version) was already installed"
        else
          _log ">>   Installing $pkg_name using npm..."
          npm install -g "$pkg_name"
          _print_command_info "$pkg_name"
        fi
      done
      ;;
    update)
      _log ">>   Updating nodenv from $nodenv_installed_version..."
      nodenv update
      npm install -g npm
      _print_command_info "nodenv"
      _print_command_info "node"
      _print_command_info "npm"

      for pkg_name in "${NODE_PKGS[@]}"; do
        local pkg_installed_version="$(_get_command_version "$pkg_name")"

        _log ">>   Updating $pkg_name from $pkg_installed_version using npm..."
        npm install -g "$pkg_name"
        _print_command_info "$pkg_name"
      done
      ;;
  esac
}

_setup_rust_env() {
  _info ">> Rust development environment"

  local rustup_installed_version="$(_get_command_version 'rustup')"

  case $subcommand in
    install)
      # cargo
      if [[ -n $rustup_installed_version ]]; then
        _log ">>   rustup ($rustup_installed_version) was already installed"
      else
        _log ">>   Installing rustup..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | bash -s -- -y
        export PATH="$HOME/.cargo/bin:$PATH"
      fi
      _print_command_info "rustup"
      _print_command_info "cargo"
      _print_command_info "rustc"

      # rust packages
      for pkg_name in "${RUST_PKGS[@]}"; do
        local pkg_installed_version="$(_get_command_version "$pkg_name")"

        if [[ -n $pkg_installed_version ]]; then
          _log ">>   $pkg_name ($pkg_installed_version) was already installed"
        else
          _log ">>   Installing $pkg_name using cargo..."
          cargo install "$pkg_name"
          _print_command_info "$pkg_name"
        fi
      done
      ;;
    update)
      _log ">>   Updating rustup from $rustup_installed_version..."
      rustup update
      _print_command_info "rustup"
      _print_command_info "cargo"
      _print_command_info "rustc"

      for pkg_name in "${RUST_PKGS[@]}"; do
        local pkg_installed_version="$(_get_command_version "$pkg_name")"

        _log ">>   Updating $pkg_name from $pkg_installed_version using npm..."
        cargo install "$pkg_name"
        _print_command_info "$pkg_name"
      done
      ;;
  esac
}
##################################################
## Docker
##################################################

_setup_docker() {
  _info ">> Docker"

  local docker_installed_version="$(_get_command_version 'docker')"
  local docker_compose_installed_version="$(_get_command_version 'docker-compose')"

  case $subcommand in
    install)
      # docker
      if [[ -n $docker_installed_version ]]; then
        _log ">>   docker ($docker_installed_version) was already installed"
        _print_command_info "docker"
      else
        _log ">>   Installing docker dependencies..."
        case "$(_get_distro)" in
          ubuntu|debian)
            curl -fsSL https://get.docker.com | bash

            sudo groupadd docker
            sudo usermod -aG docker "$USER"
            newgrp docker

            sudo systemctl start --now docker
            ;;
          manjaro|arch)
            pacman -Sy docker
            ;;
        esac
        _print_command_info "docker"
      fi

      # docker-compose
      if [[ -n $docker_compose_installed_version ]]; then
        _log ">>   docker-compose ($docker_compose_installed_version) was already installed"
        _print_command_info "docker-compose"
      else
        _log ">>   Installing docker-compose..."
        pipx install docker-compose
        _print_command_info "docker-compose"
      fi
      ;;
    update)
      _log ">>   docker ($docker_installed_version) can be update by using system package manager"
      _print_command_info "docker"

      _log ">>   Updating docker-compose from $docker_compose_installed_version..."
      pipx upgrade docker-compose
      _print_command_info "docker-compose"
      ;;
  esac
}

##################################################
## Helper functions
##################################################

_print_command_info() {
  local cmd="$(echo "$1" | cut -f 2 -d ':')"
  local installed_version="$(_get_command_version "$cmd")"

  _cprint ">>      $cmd ($installed_version)" "$fg_yellow"
}

_get_command_version() {
  local cmd="$(echo "$1" | cut -f 2 -d ':')"

  local version=""
  local try_args=("--version" "-version" "version")

  for arg in "${try_args[@]}"; do
    version=$("$cmd" "$arg" 2>/dev/null || true)
    version=$(_parse_pkg_version "${version:-}")

    if [[ -n "$version" ]]; then
      break
    fi
  done

  echo "$version"
}

_parse_pkg_version() {
  local version=$(echo "$1" | grep --max-count 1 --only-matching --perl-regexp $VERSION_REGEX || [[ $? == 1 ]])
  echo "$version" | head -n1
}

_is_command_exists() {
  local cmd="$(echo "$1" | cufg -f 2 -d ':')"

  if command -v "$cmd" >/dev/null 2>&1; then
    return 0
  fi

  return 1
}

_get_distro() {
  grep "ID=" /etc/os-release | head -n1 | cut -f 2 -d '='
}

##################################################
## Utility functions
##################################################

_setup_colors() {
  ta_normal='' ta_standout=''
  fg_blue='' fg_cyan='' fg_red='' fg_green='' fg_yellow=''

  ncolors=$(command -v tput >/dev/null && tput colors)
  if test -n "$ncolors" && test "$ncolors" -ge 8; then
    ta_normal="$(tput sgr0)"
    ta_standout="$(tput smso)"

    fg_blue="$(tput setaf 4)"
    fg_cyan="$(tput setaf 6)"
    fg_red="$(tput setaf 1)"
    fg_green="$(tput setaf 2)"
    fg_yellow="$(tput setaf 3)"
  fi
}

_cprint() {
  local message="$1"
  local fa_color="${2:-}"

  printf "${fa_color}%s${ta_normal}\\n" "$message"
}

_log() {
  _cprint "$1" "$fg_cyan"
}

_info() {
  _cprint "$1" "$fg_blue"
}

_warn() {
  _cprint "warning: $1" "$fg_yellow"
}

_error() {
  _cprint "error: $1" "$fg_red"
}

_die() {
  _error "$1"
  exit 1
}

##################################################
## Main
##################################################

main "$@"
