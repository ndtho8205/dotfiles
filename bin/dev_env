#!/usr/bin/env bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

INSTALLATION_DIR="$HOME/ProgramFiles"
TEMP_DIR=$(mktemp --directory --quiet)

VERSION_REGEX="(\\d+\\.)+\\d+"
PY3_VERSION="3.6.10"

trap _clean EXIT

main() {
  command=''
  _parse_params "$@"

  _setup_go_env
  _setup_rust_env
  _setup_node_env
  #_setup_python_env
  #_setup_gui_tools
}

_print_usage() {
  cat <<EOF
usage: $(basename "$0") [OPTION] {install,update,list}

Install and update personal development environment.

Commands:
  install        Install development environment
  update         Update all packages
  list           List installed packages
Options:
  -h, --help     Show this help and exit
EOF
}

_parse_params() {
  if [[ $# -eq 0 ]]; then
    echo "No command/option specified."
    echo
    _print_usage
    exit 1
  fi

  local param

  while [[ $# -gt 0 ]]; do
    param="$1"
    shift

    case $param in
    install)
      command="install"
      ;;
    update)
      command="update"
      ;;
    list)
      command="list"
      ;;
    -h | --help)
      _print_usage
      exit 0
      ;;
    *)
      echo "error: unrecognized arguments: $param"
      exit 1
      ;;
    esac
  done
}

_clean() {
  rm -rf "$TEMP_DIR"
}

##################################################
## Programming Languages Development Environments
##################################################

_setup_go_env() {
  info "Go development environment"

  local current_version latest_version

  current_version="no version"
  if type go >/dev/null 2>&1; then
    current_version=$(
      go version | grep --only-matching --perl-regexp $VERSION_REGEX
    )
  fi

  latest_version=$(
    wget --quiet \
      --output-document=- 'https://golang.org/dl/?mode=json' |
      grep --only-matching --perl-regexp $VERSION_REGEX |
      head --lines=1
  )

  local action_info
  case $command in
  install)
    if [[ $current_version != "no version" ]]; then
      env_info "Go is already installed." "$current_version" "$(which go)"
      return
    fi

    action_info="Installing Go ..."
    ;;
  update)
    if [[ "$current_version" == "no version" ]]; then
      echo "  Go is not installed."
      return
    fi

    if [[ "$current_version" == "$latest_version" ]]; then
      env_info "Go is up to date." "$current_version" "$(which go)"
      return
    fi

    action_info="Updating Go ..."
    ;;
  esac

  local installation_dir download_link

  installation_dir="$INSTALLATION_DIR/go"
  download_link="https://dl.google.com/go/go${latest_version}.linux-amd64.tar.gz"

  env_info "$action_info" "$current_version -> $latest_version" "$installation_dir"
  _install_from_gz "$installation_dir" "$download_link"
}

_setup_rust_env() {
  info "Rust development environment"

  local current_version

  current_version="no version"
  if type rustc >/dev/null 2>&1; then
    current_version=$(
      rustc --version | grep --only-matching --perl-regexp $VERSION_REGEX
    )
  fi

  case $command in
  install)
    if [[ $current_version != "no version" ]]; then
      env_info "Rust is already installed." "$current_version" "$(which rustc)"
      return
    fi

    env_info "Installing Rust ..." "" ""
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    ;;
  update)
    env_info "Updating Rust ..." "" ""
    rustup update
    ;;
  esac
}

_setup_node_env() {
  info "Node.js development environment"

  local current_version
  current_version="no version"
  if type node >/dev/null 2>&1; then
    current_version=$(
      node --version | grep --only-matching --perl-regexp $VERSION_REGEX
    )
  fi

  case $command in
  install)
    if [[ $current_version != "no version" ]]; then
      env_info "Node.js is already installed." "$current_version" "$(which node)"
      return
    fi

    env_info "Installing Node.js ..." "" ""
    curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
    sudo apt-get install -y nodejs
    ;;
  update)
    env_info "Updating Node.js ..." "" ""
    sudo apt-get -qq update
    sudo apt-get install --only-upgrade nodejs
    ;;
  esac
}

_setup_python_env() {
  info "Python development environment"
  case $command in
  install)
    sudo apt install -y --no-install-recommends \
      make build-essential libssl-dev zlib1g-dev libbz2-dev \
      libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
      xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev

    curl https://pyenv.run | bash
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"

    pyenv install "$PY3_VERSION"
    pyenv global "$PY3_VERSION" system

    pip install --upgrade pip

    pip install pipx

    curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python

    pipx install black
    pipx install flake8
    pipx install pylint
    ;;
  update)
    pipx upgrade-all
    ;;
  esac
}

##################################################
## Docker
##################################################

_install_docker() {
  sudo apt purge docker docker-engine docker.io containerd runc

  sudo apt install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common

  curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -

  sudo add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/debian \
    $(lsb_release -cs) \
    stable"

  sudo apt-get update
  sudo apt-get install docker-ce docker-ce-cli containerd.io

  sudo groupadd docker
  sudo usermod -aG docker "$USER"
  newgrp docker

  sudo systemctl start docker

  pipx install docker-compose
}

##################################################
## CLI Tools
##################################################

_install_cli_tools() {
  cargo install tealdeer
  tldr --update

  cargo install --locked bat

  cargo install watchexec

  bash -c "$DOTFILES/vim/pack/plugins/start/fzf/install --bin"

  npm i -g markdownlint-cli prettier

  sudo apt install shellcheck
  GO111MODULE=on go get mvdan.cc/sh/v3/cmd/shfmt

  go get github.com/jesseduffield/lazydocker

  # TODO: wagoodman/dive - exploring docker image
}

##################################################
## GUI Tools
##################################################

_setup_gui_tools() {
  info "Visual Studio Code (skipped)"

  _setup_joplin

  info "pCloud"
}

_setup_joplin() {
  local installation_dir filename current_version latest_version appimage_version

  installation_dir="$INSTALLATION_DIR/Joplin"
  filename="Joplin.AppImage"
  current_version="no version"
  if [[ -e "${installation_dir}/VERSION" ]]; then
    current_version=$(<"${installation_dir}/VERSION")
  fi
  latest_version=$(curl -fsSL "https://api.github.com/repos/laurent22/joplin/releases/latest" | grep -Po '"tag_name": ?"v\K.*?(?=")')

  info_with_version "Joplin" "$current_version" "$latest_version"

  if [[ "$current_version" == "$latest_version" ]]; then
    return 0
  fi

  # clean
  mkdir -p "$installation_dir"
  cd "$installation_dir"
  rm -rf ./*

  # download Joplin
  wget \
    --quiet \
    --show-progress \
    --output-document="./$filename" \
    "https://github.com/laurent22/joplin/releases/download/v${latest_version}/Joplin-${latest_version}.AppImage"
  chmod +x "./$filename"

  # create Desktop icon
  (./Joplin.AppImage --appimage-extract joplin.desktop &>/dev/null)
  appimage_version=$(grep "^X-AppImage-Version=" ./squashfs-root/joplin.desktop | head -n 1 | cut -d "=" -f 2)
  rm -rf ./squashfs-root
  rm -f ~/.local/share/applications/appimagekit-joplin.desktop
  echo -e "[Desktop Entry]\nEncoding=UTF-8\nName=Joplin\nComment=Joplin for Desktop\nExec=${installation_dir}/${filename}\nIcon=joplin\nStartupWMClass=Joplin\nType=Application\nCategories=Office;\nX-AppImage-Version=${appimage_version}" >>~/.local/share/applications/appimagekit-joplin.desktop

  # record version
  echo "$latest_version" >./VERSION
}

##################################################
## VPN Tools
##################################################

_install_vpn_tools() {
  pyenv shell system

  sudo apt install --no-install-recommends openvpn dialog python3-pip python3-setuptools
  sudo pip3 install protonvpn-cli

  echo "Please login to ProtonVPN account at 'https://account.protonvpn.com/account'"
  echo "to get the OpenVPN credentials."
  xdg-open "https://account.protonvpn.com/"
  sudo protonvpn init

  pyenv shell --unset
}

##################################################
## Utility functions
##################################################

ta_normal='' ta_standout=''
fg_blue='' fg_red='' fg_green=''

ncolors=$(command -v tput >/dev/null && tput colors)
if test -n "$ncolors" && test "$ncolors" -ge 8; then
  ta_normal="$(tput sgr0)"
  ta_standout="$(tput smso)"

  fg_blue="$(tput setaf 4)"
  fg_red="$(tput setaf 1)"
  fg_green="$(tput setaf 2)"
fi

info() {
  printf "\\n${ta_standout}${fg_blue} INFO ${ta_normal} ${fg_blue}%s${ta_normal}\\n" "$1"
}

env_info() {
  echo "  $1"
  [[ $2 != "" ]] && echo "    version: $2"
  [[ $3 != "" ]] && echo "    location: $3"
  echo ""
}

info_with_version() {
  printf "\\n${ta_standout}${fg_blue} INFO ${ta_normal} ${fg_blue}%s${ta_normal} (%s -> %s)\\n" "$1" "$2" "$3"
}

success() {
  printf "\\n${ta_standout}${fg_green} DONE ${ta_normal} ${fg_green}%s${ta_normal}\\n" "$1"
}

fail() {
  printf "\\n${ta_standout}${fg_red} FAIL ${ta_normal} ${fg_red}%s${ta_normal}\\n" "$1"
}

##################################################
## Helpers
##################################################

_install_from_gz() {
  local installation_dir download_link temp_file

  installation_dir=$1
  download_link=$2
  temp_file=$(
    mktemp --quiet --dry-run \
      --tmpdir="$TEMP_DIR" --suffix="$$.tar.gz"
  )

  wget \
    --quiet \
    --show-progress \
    --output-document="$temp_file" \
    "$download_link"

  mkdir -p "$installation_dir"
  rm -rf "$installation_dir"/*
  tar -xf "$temp_file" -C "$installation_dir" --strip=1
}

##################################################
##################################################

main "$@"
