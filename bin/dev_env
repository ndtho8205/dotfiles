#!/usr/bin/env bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

INSTALLATION_DIR="$HOME/ProgramFiles"
TEMP_DIR="$(mktemp --directory --quiet)"

VERSION_REGEX="(\\d+\\.)+\\d+"
PY3_VERSION="3.6.10"

trap _clean EXIT

main() {
  command=''
  _parse_params "$@"

  _setup_go_env
  _setup_rust_env
  _setup_node_env
  _setup_python_env

  _setup_cli_tools
  _setup_gui_tools

  _setup_pcloud
  _setup_obsidian
  _setup_calibre
  _setup_nordvpn
}

_print_usage() {
  cat <<EOF
usage: $(basename "$0") [OPTION] {install,update,list}

Install and update personal development environment.

Commands:
  install        Install development environment
  update         Update all packages
  list           List installed packages
Options:
  -h, --help     Show this help and exit
EOF
}

_parse_params() {
  if [[ $# -eq 0 ]]; then
    echo "No command/option specified."
    echo
    _print_usage
    exit 1
  fi

  local param

  while [[ $# -gt 0 ]]; do
    param="$1"
    shift

    case $param in
    install)
      command="install"
      ;;
    update)
      command="update"
      ;;
    list)
      command="list"
      ;;
    -h | --help)
      _print_usage
      exit 0
      ;;
    *)
      echo "error: unrecognized arguments: $param"
      exit 1
      ;;
    esac
  done
}

_clean() {
  rm -rf "$TEMP_DIR"
}

##################################################
## Programming Languages Development Environments
##################################################

_setup_go_env() {
  info "Go development environment"

  local current_version latest_version

  current_version="no version"
  if type go >/dev/null 2>&1; then
    current_version=$(
      go version | grep --only-matching --perl-regexp $VERSION_REGEX
    )
  fi

  latest_version=$(
    wget --quiet \
      --output-document=- 'https://golang.org/dl/?mode=json' |
      grep --only-matching --perl-regexp $VERSION_REGEX |
      head --lines=1
  )

  if ! _check_status "Go" "$current_version" "$latest_version" "$(which go)"; then
    return
  fi

  local action_info
  case $command in
  install)
    action_info="Installing Go ..."
    ;;
  update)
    action_info="Updating Go ..."
    ;;
  esac

  local installation_dir download_link

  installation_dir="$INSTALLATION_DIR/go"
  download_link="https://dl.google.com/go/go${latest_version}.linux-amd64.tar.gz"

  env_info "$action_info" "$current_version -> $latest_version" "$installation_dir"
  install_gz "$installation_dir" "$download_link"
}

_setup_rust_env() {
  info "Rust development environment"

  local current_version

  current_version="no version"
  if type rustc >/dev/null 2>&1; then
    current_version=$(
      rustc --version | grep --only-matching --perl-regexp $VERSION_REGEX
    )
  fi

  case $command in
  install)
    if [[ $current_version != "no version" ]]; then
      env_info "Rust is already installed." "$current_version" "$(which rustc)"
      return
    fi

    env_info "Installing Rust ..." "" ""
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    ;;
  update)
    env_info "Updating Rust ..." "" ""
    rustup update
    ;;
  esac
}

_setup_node_env() {
  info "Node.js development environment"

  local current_version

  current_version="no version"
  if type nvm >/dev/null 2>&1; then
    current_version=$(
      nvm --version | grep --only-matching --perl-regexp $VERSION_REGEX
    )
  fi

  local action_info
  case $command in
  install)
    if [[ $current_version != "no version" ]]; then
      env_info "nvm is already installed." "$current_version" "$HOME/.nvm"
      return
    fi
    action_info="Installing"
    ;;
  update)
    action_info="Updating"
    ;;
  esac

  echo "  $action_info nvm ..."

  # install/update nvm
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash

  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  if [[ $command == 'install' ]]; then
    nvm install 'lts/*'
  fi
}

_setup_python_env() {
  info "Python development environment"

  local current_version

  current_version="no version"
  if type pyenv >/dev/null 2>&1; then
    current_version=$(
      pyenv --version | grep --only-matching --perl-regexp $VERSION_REGEX
    )
  fi

  case $command in
  install)
    if [[ $current_version != "no version" ]]; then
      env_info "pyenv is already installed." "$current_version" "$HOME/.pyenv"
      return
    fi

    if [ "$(grep -Ei 'debian|buntu|mint' /etc/*release)" ]; then
      sudo apt install -y --no-install-recommends \
        make build-essential libssl-dev zlib1g-dev libbz2-dev \
        libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
        xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
    fi

    curl https://pyenv.run | bash
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"

    pyenv install "$PY3_VERSION"
    pyenv global "$PY3_VERSION" system

    pip install --upgrade pip

    pip install pipx

    curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python

    pipx install black
    pipx install flake8
    pipx install pylint
    ;;
  update)
    cd $(pyenv root)
    git pull

    pip install --upgrade pip
    pip install --upgrade pipx

    poetry self update

    pipx upgrade-all
    ;;
  esac
}

##################################################
## Docker
##################################################

_install_docker() {
  sudo apt purge docker docker-engine docker.io containerd runc

  sudo apt install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common

  curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -

  sudo add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/debian \
    $(lsb_release -cs) \
    stable"

  sudo apt-get update
  sudo apt-get install docker-ce docker-ce-cli containerd.io

  sudo groupadd docker
  sudo usermod -aG docker "$USER"
  newgrp docker

  sudo systemctl start docker

  pipx install docker-compose

  if [ "$(grep -Ei 'debian|buntu|mint' /etc/*release)" ]; then
    :
  else
    yay -S dive
  fi
}

##################################################
## CLI Tools
##################################################

_setup_cli_tools() {
  info "CLI Tools"

  case $command in
  install)
    echo "  Installing tealdeer ..."
    cargo install tealdeer
    tldr --update

    echo "  Installing bat ..."
    cargo install --locked bat

    echo "  Installing watchexec ..."
    cargo install watchexec

    echo "  Installing fzf ..."
    bash -c "$DOTFILES/vim/pack/plugins/start/fzf/install --bin"

    echo "  Installing markdownlint-cli ..."
    npm i -g markdownlint-cli

    echo "  Installing prettier ..."
    npm i -g prettier

    echo "  Installing shellcheck ..."

    if [ "$(grep -Ei 'debian|buntu|mint' /etc/*release)" ]; then
      sudo apt install shellcheck
    else
      yay -S shellcheck-bin
    fi

    echo "  Installing shfmt ..."
    GO111MODULE=on go get mvdan.cc/sh/v3/cmd/shfmt

    echo "  Installing ueberzug ..."
    pipx install ueberzug

    ;;
  update)
    :
    ;;
  esac

  #go get github.com/jesseduffield/lazydocker
  # TODO: wagoodman/dive - exploring docker image
}

##################################################
## GUI Tools
##################################################

_setup_gui_tools() {
  info "Visual Studio Code (skipped)"

}

_setup_pcloud() {
  info "pCloud"

  local installation_dir pcloud_info current_version latest_version

  installation_dir="$INSTALLATION_DIR/pCloud"

  current_version="no version"
  if [[ -e "${installation_dir}/VERSION" ]]; then
    current_version=$(<"${installation_dir}/VERSION")
  fi

  pcloud_info=$(wget --quiet --output-document=- "https://api.pcloud.com/getlastversion?os=ELECTRON")

  latest_version=$(echo "$pcloud_info" | grep -Po '"version": ?"\K.*?(?=")')

  if ! _check_status "pCloud" "$current_version" "$latest_version" "$installation_dir"; then
    return
  fi

  local action_info
  case $command in
  install)
    action_info="Installing pCloud ..."
    ;;
  update)
    action_info="Updating pCloud ..."
    ;;
  esac

  local download_link

  download_link=$(echo "$pcloud_info" | grep --only-matching --perl-regexp '"update": "\K.*?(?=")' | sed -e 's+\\++g')

  env_info "$action_info" "$current_version -> $latest_version" "$installation_dir"
  install_appimage "$installation_dir" "$download_link"
  echo "$latest_version" >"$installation_dir/VERSION"
}

_setup_obsidian() {
  info "Obsidian"

  local installation_dir current_version latest_version

  installation_dir="$INSTALLATION_DIR/Obsidian"

  current_version="no version"
  if [[ -e "${installation_dir}/VERSION" ]]; then
    current_version=$(<"${installation_dir}/VERSION")
  fi

  latest_version=$(curl -fsSL "https://api.github.com/repos/obsidianmd/obsidian-releases/releases/latest" | grep -Po '"tag_name": ?"v\K.*?(?=")')

  if ! _check_status "Obsidian" "$current_version" "$latest_version" "$installation_dir"; then
    return
  fi

  local action_info
  case $command in
  install)
    action_info="Installing Obsidian..."
    ;;
  update)
    action_info="Updating Obsidian..."
    ;;
  esac

  local download_link
  download_link="https://github.com/obsidianmd/obsidian-releases/releases/download/v${latest_version}/Obsidian-${latest_version}.AppImage"

  env_info "$action_info" "$current_version -> $latest_version" "$installation_dir"
  install_appimage "$installation_dir" "$download_link"
  echo "$latest_version" >"$installation_dir/VERSION"
}

##################################################
## VPN Tools
##################################################

_setup_vpn() {
  info "ProtonVPN"

  case $command in
  install)
    if [ "$(grep -Ei 'debian|buntu|mint' /etc/*release)" ]; then
      sudo apt install --no-install-recommends openvpn dialog
    else
      sudo pacman -S openvpn dialog
    fi

    pipx install protonvpn-cli

    echo "Please login to ProtonVPN account at 'https://account.protonvpn.com/account'"
    echo "to get the OpenVPN credentials."
    xdg-open "https://account.protonvpn.com/"

    sudo protonvpn init
    ;;
  esac

}

_setup_calibre() {
  info "Calibre"

  wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sh /dev/stdin install_dir=~/ProgramFiles/calibre isolated=y

}

_setup_nordvpn() {
  info "NordVPN"

  case $command in
  install)
    if [ "$(grep -Ei 'debian|buntu|mint' /etc/*release)" ]; then
      :
    else
      yay -S nordvpn-bin
    fi

    sudo systemctl enable nordvpn
    sudo systemctl start nordvpn

    nordvpn login
    nordvpn set protocol TCP
    nordvpn set autoconnect on Double_VPN
    nordvpn set killswitch on
    nordvpn set cybersec on
    nordvpn set obfuscate on

    nordvpn c -g Double_VPN
    ;;
  esac

}

##################################################
## Utility functions
##################################################

ta_normal='' ta_standout=''
fg_blue='' fg_red='' fg_green=''

ncolors=$(command -v tput >/dev/null && tput colors)
if test -n "$ncolors" && test "$ncolors" -ge 8; then
  ta_normal="$(tput sgr0)"
  ta_standout="$(tput smso)"

  fg_blue="$(tput setaf 4)"
  fg_red="$(tput setaf 1)"
  fg_green="$(tput setaf 2)"
fi

info() {
  printf "\\n${ta_standout}${fg_blue} INFO ${ta_normal} ${fg_blue}%s${ta_normal}\\n" "$1"
}

env_info() {
  echo "  $1"
  [[ $2 != "" ]] && echo "    version: $2"
  [[ $3 != "" ]] && echo "    location: $3"
  echo ""
}

info_with_version() {
  printf "\\n${ta_standout}${fg_blue} INFO ${ta_normal} ${fg_blue}%s${ta_normal} (%s -> %s)\\n" "$1" "$2" "$3"
}

success() {
  printf "\\n${ta_standout}${fg_green} DONE ${ta_normal} ${fg_green}%s${ta_normal}\\n" "$1"
}

fail() {
  printf "\\n${ta_standout}${fg_red} FAIL ${ta_normal} ${fg_red}%s${ta_normal}\\n" "$1"
}

##################################################
## Helpers
##################################################

_check_status() {
  local name current_version latest_version installation_dir

  name=$1
  current_version=$2
  latest_version=$3
  installation_dir=$4

  case $command in
  install)
    if [[ "$current_version" != "no version" ]]; then
      env_info "$name is already installed." "$current_version" "$installation_dir"
      return 1
    fi
    ;;
  update)
    if [[ "$current_version" == "no version" ]]; then
      echo "  $name is not installed."
      return 1
    fi

    if [[ "$current_version" == "$latest_version" ]]; then
      env_info "$name is up to date." "$current_version" "$installation_dir"
      return 1
    fi
    ;;
  esac
  return 0
}

##################################################
##################################################

main "$@"
